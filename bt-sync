#!/bin/bash
# Wrapper script to run Bluetooth sync utility with proper environment

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    echo "‚ùå This utility requires root privileges. Please run with sudo."
    exit 1
fi

# Get the original user info (when called with sudo)
ORIGINAL_USER="${SUDO_USER:-$(whoami)}"
ORIGINAL_HOME=$(eval echo "~$ORIGINAL_USER")

echo "üîß Bluetooth Synchronization Utility"
echo "Running as root with user environment: $ORIGINAL_USER"
echo "Working directory: $SCRIPT_DIR"

# Try different approaches to run the script

# Method 1: Try to use the original user's pipenv environment
if command -v pipenv &> /dev/null && [ -f "$SCRIPT_DIR/Pipfile" ]; then
    echo "üì¶ Attempting to use pipenv environment..."
    cd "$SCRIPT_DIR"
    
    # Try to run with the user's pipenv environment
    if sudo -u "$ORIGINAL_USER" pipenv --venv &> /dev/null; then
        echo "‚úÖ Found existing pipenv environment"
        # Get the virtual environment path
        VENV_PATH=$(sudo -u "$ORIGINAL_USER" pipenv --venv 2>/dev/null)
        if [ -n "$VENV_PATH" ] && [ -f "$VENV_PATH/bin/python" ]; then
            echo "üêç Using virtual environment: $VENV_PATH"
            exec "$VENV_PATH/bin/python" "$SCRIPT_DIR/bt_sync.py" "$@"
        fi
    fi
    
    echo "‚ö†Ô∏è  Pipenv environment not ready, falling back to system Python..."
fi

# Method 2: Try system Python with user-installed packages
if [ -f "$ORIGINAL_HOME/.local/lib/python3.13/site-packages/Registry/__init__.py" ] || 
   [ -f "$ORIGINAL_HOME/.local/lib/python*/site-packages/Registry/__init__.py" ]; then
    echo "üì¶ Found user-installed python-registry, using system Python with user packages..."
    export PYTHONPATH="$ORIGINAL_HOME/.local/lib/python$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')/site-packages:$PYTHONPATH"
    exec python3 "$SCRIPT_DIR/bt_sync.py" "$@"
fi

# Method 3: Install system-wide and run
echo "üì¶ Installing python-registry system-wide..."
if command -v apt &> /dev/null; then
    apt update -qq
    apt install -y python3-pip
    pip3 install python-registry==1.3.1
elif command -v dnf &> /dev/null; then
    dnf install -y python3-pip
    pip3 install python-registry==1.3.1
elif command -v yum &> /dev/null; then
    yum install -y python3-pip
    pip3 install python-registry==1.3.1
else
    echo "‚ùå Could not install python-registry automatically."
    echo "Please install manually with: pip3 install python-registry==1.3.1"
    exit 1
fi

echo "‚úÖ Dependencies installed, running utility..."
exec python3 "$SCRIPT_DIR/bt_sync.py" "$@"
